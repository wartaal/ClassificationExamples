Entwicklung einer abgesicherten Ausführungsumgebung für automatisierte Bewertungsprozesse
In der Lehre kommen seit einiger Zeit Autobewerter zum Einsatz, um automatisiert oder teilautomatisiert Lösungen von Lernenden zu Programmieraufgaben zu bewerten. Aus Sicht eines Betreibers von Autobewerter-Systemen erfordert letzteres meist die Ausführung von fremdem Programmcode in der eigenen Server-Umgebung. Hierbei ist Vorsicht geboten, da fehlerhafter oder angriffslustiger Programmcode verbotene Aktionen ausführen könnte.
An der Hochschule Hannover können Studierende Lösungen zu Programmieraufgaben verschiedener Programmiersprachen über das Lernmanagementsystem "moodle" einreichen. Die angeschlossene Middleware Grappa nimmt Lösungen anschließend entgegen und leitet diese an einen Autobewerter der zugehörigen Programmiersprache weiter.
Diese Arbeit befasst sich damit, Sicherheitsrisiken bei der Ausführung von fremdem Programmcode durch Autobewerter zu identifizieren und zu vermeiden. Hierzu gilt es, mögliche Angriffe herauszustellen und aktuelle, angemessene Technologien zu finden, um diese zu verhindern. Anschließend findet mit einer Technologie die Entwicklung einer abgesicherten Ausführungsumgebung für beliebige an die Middleware Grappa angebundene Autobewerter statt. Die exemplarische Einbettung der beiden Autobewerter Graja und Praktomat in die entwickelte Ausführungsumgebung soll unter Beweis stellen, dass es sich um eine generische Lösung mit wenig Overhead handelt.